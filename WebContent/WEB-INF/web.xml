<?xml version="1.0" encoding="UTF-8"?>

<web-app 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns="http://java.sun.com/xml/ns/javaee" 
xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" 
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" 
id="WebApp_ID" version="2.5">


<!--  a config file for a java web project. a servlet container, like tomact, will use this file.   -->

<!--  the declare order of these servlet listener and context-param matters, if I change the order of these servlet listener and context-param, 
the web application will not start up. -->

	<servlet>
		<servlet-name>user</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>user</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<description>This is the description of my J2EE component</description>
		<display-name>This is the display name of my J2EE component</display-name>
		<servlet-name>FileDownServlet</servlet-name>
		<servlet-class>zttc.itat.document.web.FileDownServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>FileDownServlet</servlet-name>
		<url-pattern>/FileDownServlet</url-pattern>
	</servlet-mapping>

	<!-- create a Spring listener -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	 <listener>
    <listener-class> org.springframework.web.context.ContextCleanupListener</listener-class>
  </listener>
  
	<!-- Spring listener can get the location of beans.xml according to this context parameter -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!--  in the contextConfigLocation, we define the spring configuration file. -->
		<param-value>classpath*:beans.xml</param-value>
	</context-param>

	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>CharacterFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Spring has provided  org.springframework.orm.hibernate3.support.OpenSessionInViewFilter; 
	this class can implement the operation of OpenSessionInViewer -->
	<!-- don't know how to achieve this in myBatis, so I commit this off -->
	<!-- 
	<filter>
		<filter-name>openSessionInViewerFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
		<init-param>  
               <param-name>flushMode</param-name>  
               <param-value>AUTO</param-value>  
           </init-param> 
       <init-param>  
           <param-name>singleSession</param-name>  
           <param-value>true</param-value>
       </init-param>
	</filter>
	<filter-mapping>
		<filter-name>openSessionInViewerFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	 -->

	<filter>
		<filter-name>SystemContextFilter</filter-name>
		<filter-class>zttc.itat.web.SystemContextFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>SystemContextFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>LoginFilter</filter-name>
		<filter-class>zttc.itat.web.LoginFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>LoginFilter</filter-name>
		<url-pattern>/user/*</url-pattern>
		<url-pattern>/doc/*</url-pattern>
		<url-pattern>/login</url-pattern>
	</filter-mapping>

</web-app>
	